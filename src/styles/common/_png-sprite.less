/*
LESS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: @icon-home-width;
}

The large array-like variables contain all information about a single icon
@icon-home: x y offset_x offset_y width height total_width total_height image_path name;

At the bottom of this section, we provide information about the spritesheet itself
@spritesheet: width height image @spritesheet-sprites;
*/
@open109-name: open109;
@open109-x: 0px;
@open109-y: 0px;
@open109-offset-x: 0px;
@open109-offset-y: 0px;
@open109-width: 256px;
@open109-height: 256px;
@open109-total-width: 282px;
@open109-total-height: 256px;
@open109-image: '../img/sprites/png/sprite.png';
@open109: 0px 0px 0px 0px 256px 256px 282px 256px '../img/sprites/png/sprite.png' open109;
@retina-name: retina;
@retina-x: 258px;
@retina-y: 0px;
@retina-offset-x: -258px;
@retina-offset-y: 0px;
@retina-width: 24px;
@retina-height: 21px;
@retina-total-width: 282px;
@retina-total-height: 256px;
@retina-image: '../img/sprites/png/sprite.png';
@retina: 258px 0px -258px 0px 24px 21px 282px 256px '../img/sprites/png/sprite.png' retina;
@open109-2x-name: open109-2x;
@open109-2x-x: 0px;
@open109-2x-y: 0px;
@open109-2x-offset-x: 0px;
@open109-2x-offset-y: 0px;
@open109-2x-width: 256px;
@open109-2x-height: 256px;
@open109-2x-total-width: 284px;
@open109-2x-total-height: 256px;
@open109-2x-image: '../img/sprites/png/sprite-2x.png';
@open109-2x: 0px 0px 0px 0px 256px 256px 284px 256px '../img/sprites/png/sprite-2x.png' open109-2x;
@retina-2x-name: retina-2x;
@retina-2x-x: 260px;
@retina-2x-y: 0px;
@retina-2x-offset-x: -260px;
@retina-2x-offset-y: 0px;
@retina-2x-width: 24px;
@retina-2x-height: 21px;
@retina-2x-total-width: 284px;
@retina-2x-total-height: 256px;
@retina-2x-image: '../img/sprites/png/sprite-2x.png';
@retina-2x: 260px 0px -260px 0px 24px 21px 284px 256px '../img/sprites/png/sprite-2x.png' retina-2x;
@spritesheet-width: 282px;
@spritesheet-height: 256px;
@spritesheet-image: '../img/sprites/png/sprite.png';
@spritesheet-sprites: @open109 @retina;
@spritesheet: 282px 256px '../img/sprites/png/sprite.png' @spritesheet-sprites;
@retina-spritesheet-width: 284px;
@retina-spritesheet-height: 256px;
@retina-spritesheet-image: '../img/sprites/png/sprite-2x.png';
@retina-spritesheet-sprites: @open109-2x @retina-2x;
@retina-spritesheet: 284px 256px '../img/sprites/png/sprite-2x.png' @retina-spritesheet-sprites;

/*
These "retina group" variables are mappings for the naming and pairing of normal and retina sprites.

The list formatted variables are intended for mixins like `retina-sprite` and `retina-sprites`.
*/
@open109-group-name: open109;
@open109-group: open109 @open109 @open109-2x;
@retina-group-name: retina;
@retina-group: retina @retina @retina-2x;
@retina-groups: @open109-group @retina-group;

/*
The provided classes are intended to be used with the array-like variables

.icon-home {
  .sprite-width(@icon-home);
}
.icon-email {
  .sprite(@icon-email);
}
*/
.sprite-width(@sprite) {
  width: extract(@sprite, 5);
}

.sprite-height(@sprite) {
  height: extract(@sprite, 6);
}

.sprite-position(@sprite) {
  @sprite-offset-x: extract(@sprite, 3);
  @sprite-offset-y: extract(@sprite, 4);
  background-position: @sprite-offset-x @sprite-offset-y;
}

.sprite-image(@sprite) {
  @sprite-image: extract(@sprite, 9);
  @sprite-image-bare: ~`"@{sprite-image}".slice(1, -1)`;
  background-image: url(@sprite-image-bare);
}

.sprite(@sprite) {
  .sprite-image(@sprite);
  .sprite-position(@sprite);
  .sprite-width(@sprite);
  .sprite-height(@sprite);
}

/*
The `retina-sprite` class sets up rules and a media query for a sprite/retina sprite.
  It should be used with a "retina group" variable.

The media query is from CSS Tricks: https://css-tricks.com/snippets/css/retina-display-media-query/

@icon-home-group: 'icon-home' @icon-home @icon-home-2x;

.icon-home {
  .retina-sprite(@icon-home-group);
}
*/
.sprite-background-size(@sprite) {
  @sprite-total-width: extract(@sprite, 7);
  @sprite-total-height: extract(@sprite, 8);
  background-size: @sprite-total-width @sprite-total-height;
}

.retina-sprite(@retina-group) {
  @normal-sprite: extract(@retina-group, 2);
  @retina-sprite: extract(@retina-group, 3);
  .sprite(@normal-sprite);

  @media (-webkit-min-device-pixel-ratio: 2),
         (min-resolution: 192dpi) {
    .sprite-image(@retina-sprite);
    .sprite-background-size(@normal-sprite);
  }
}

/*
The `.sprites` mixin generates identical output to the CSS template
  but can be overridden inside of LESS

This must be run when you have at least 2 sprites.
  If run with a single sprite, then there will be reference errors.

.sprites(@spritesheet-sprites);
*/
.sprites(@sprites, @i: 1) when (@i <= length(@sprites)) {
  @sprite: extract(@sprites, @i);
  @sprite-name: extract(@sprite, 10);
  .@{sprite-name} {
    .sprite(@sprite);
  }
  .sprites(@sprites, @i + 1);
}

/*
The `.retina-sprites` mixin generates a CSS rule and media query for retina groups
  This yields the same output as CSS retina template but can be overridden in LESS

.retina-sprites(@retina-groups);
*/
.retina-sprites(@retina-groups, @i: 1) when (@i <= length(@retina-groups)) {
  @retina-group: extract(@retina-groups, @i);
  @sprite-name: extract(@retina-group, 1);
  .@{sprite-name} {
    .retina-sprite(@retina-group);
  }
  .retina-sprites(@retina-groups, @i + 1);
}
